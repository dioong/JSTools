package com.miconblog.jstools;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TemplatePreprocessor {
	public TemplatePreprocessor(){
		
		
	}
	public static void main(String[] args) throws IOException{
		TemplatePreprocessor processor = new TemplatePreprocessor();
		//processor.setTemplateFile("./samples/tpl/template.tpl");
		//processor.setOutputFile("./samples/tpl/templates.js");
		
		File tplFile = new File("./samples/tpl/template.tpl");
		File outputFile = new File("./samples/tpl/template.js");
		processor.process(tplFile, outputFile, "Template.add", "UTF-8", true);
	}

	public void process(File sourceFile, File outputFile, String callback, String encoding, boolean isOut) throws IOException {
		String tplOpenPattern = "(?:\\<!--\\s*\\[([\\w_]*)\\]\\s*--\\>[ \n\r\t]*)";
		String tplClosePattern;
		
		Pattern p = Pattern.compile(tplOpenPattern);
		Pattern pEnd;
		Matcher m;

		BufferedReader in = new BufferedReader( new InputStreamReader( new FileInputStream(sourceFile), "UTF-8") );

		String strLine;
		String id="";
		Boolean bPatternStart = false; 
		
		HashMap<String, String> map = new HashMap<String, String>();
		String source = null; 
		
		// 한줄씩 템플릿을 읽어서 처리
		while((strLine=in.readLine())!= null){
			
			// 템플릿 시작 패턴이 아니면,.. id를 찾는다.
			if(!bPatternStart){
				m = p.matcher(strLine);
				if( m.find() ){
					id = m.group(1);
					bPatternStart = true;
					source="";
					//System.out.println(id);
					continue;
				}
			}
			
			// id를 찾았으므로,.. 닫는 태그까지 찾아라~
			tplClosePattern = "(?:[ \n\r\t]*\\<!--\\s*\\[\\/" + id + "\\]\\s*--\\>[ \n\r\t]*)";
			pEnd = Pattern.compile(tplClosePattern);
			m = pEnd.matcher(strLine);
			if( m.find() ){
				
				map.put(id, convert(source));
				bPatternStart = false;
				continue;
			}
			
			source += strLine+"\n";
			//out.write(new String(strLine.getBytes("UTF-8"), "UTF-8"));
			//System.out.println(strLine);
		}
		in.close();
		//System.out.println(map);
		System.out.println( outputFile.getAbsoluteFile() );
		if  ( isOut ){
			writeToFile(map, outputFile, callback, encoding);	
		}else{
			Iterator<String> iterator = map.keySet().iterator();
			if ( callback == null ){ callback = "Template"; }
			
			System.out.print("/**\n" +
					" * generated by JSTools 2.7.0 nightly\n" +
					" * @namespace "+ callback +"\n" +
					" */\n" +
					"(function() {\n" +
					"\tvar oTplCache = {};\n" +
					"\t" + callback + " = {\n" +
					"\t\tadd : function(oTpl){\n" +
					"\t\t\tisTplLoaded = true;\n" +
					"\t\t\toTplCache = oTpl;\n" +
					"\t\t},\n" +
					"\t\tget : function(id, data){\n" +
					"\t\t\treturn oTplCache[id](data);\n" +
					"\t\t}\n" +
					"\t};\n" +
					"})();\n");
			
			System.out.print(callback + ".add({");
			System.out.print(System.getProperty("line.separator"));
			while (iterator.hasNext()) {
		        String key = (String) iterator.next();
		        System.out.print("\t'"+key+"':");
		        System.out.print(map.get(key));
		        if(iterator.hasNext()){
		        	System.out.print(",");
		        }
		        System.out.print(System.getProperty("line.separator"));
		    }
			System.out.print("});");
		}
		
		

	}
	
	private String convert(String source) {
		source = source.replaceAll("(\\{%)([^%\\}]*)(\\{|\\})([^%\\}]*)(%\\})", "$1 $2 $3 $4 $5");
		
		String func = "" 
			+ "function(_d_) {"
			+ "_d_ = _d_ || {};"
			+ "var p = [];"
			+ "with (_d_) {"
			+ "p.push('"
			+ source
				.replaceAll("[\r\t\n]", " ")
				.replaceAll("\\{%", "\t")
				.replaceAll("((^|%\\})[^\t]*)'", "$1\r")
				.replaceAll("'", "\r")
				.replaceAll("\t=(.*?)%\\}", "',$1,'")
				.replaceAll("\t", "');")
				.replaceAll("%\\}", "p.push('")
				.replaceAll("\r", "\\\\'")
			+ "');}return p.join('');"
			+ "}"
			;
		
		return func;
	}
	
	private void writeToFile(HashMap<String, String> map, File outputFile,String callback, String encoding) throws IOException{
		
		BufferedWriter out = new BufferedWriter( new OutputStreamWriter( new FileOutputStream(outputFile), encoding) );
		Iterator<String> iterator = map.keySet().iterator();
		if ( callback == null ){ callback = "Template"; }
		
		out.write("/**\n" +
				" * generated by JSTools 2.6.0\n" +
				" * @namespace "+ callback +"\n" +
				" */\n" +
				"(function() {\n" +
				"\tvar oTplCache = {};\n" +
				"\t" + callback + " = {\n" +
				"\t\tadd : function(oTpl){\n" +
				"\t\t\tisTplLoaded = true;\n" +
				"\t\t\toTplCache = oTpl;\n" +
				"\t\t},\n" +
				"\t\tget : function(id, data){\n" +
				"\t\t\treturn oTplCache[id](data);\n" +
				"\t\t}\n" +
				"\t};\n" +
				"})();\n");
		
		out.write(callback + ".add({");
		out.write(System.getProperty("line.separator"));
		while (iterator.hasNext()) {
	        String key = (String) iterator.next();
	        out.write("\t'"+key+"':");
	        out.write(map.get(key));
	        if(iterator.hasNext()){
	        	out.write(",");
	        }
	        out.write(System.getProperty("line.separator"));
	    }
		out.write("});");
		out.close();
	}
	public void printInfo(File file) {
		
		if (file.exists()) {
		      long fileSize = file.length();
		      System.out.printf("\tTask completed! (%d Byte)", fileSize);
		}
		
	}
}